//
//  Utility.m
//  LianZhiParent
//
//  Created by jslsxu on 14/12/26.
//  Copyright (c) 2014Âπ¥ jslsxu. All rights reserved.
//

#import "Utility.h"
#include <sys/stat.h>

@implementation Utility

+ (NSString *)formatStringForTime:(NSInteger)timeInterval
{
    if(timeInterval < 60)
        return [NSString stringWithFormat:@"%ld\"",(long)timeInterval];
    else
    {
        NSInteger minute = timeInterval / 60;
        NSInteger second = timeInterval % 60;
        return [NSString stringWithFormat:@"%ld'%ld\"",(long)minute, (long)second];
    }
}

+ (NSUInteger)sizeAtPath:(NSString *)filePath diskMode:(BOOL)diskMode
{
    uint64_t totalSize = 0;
    NSMutableArray *searchPaths = [NSMutableArray arrayWithObject:filePath];
    while ([searchPaths count] > 0)
    {
        @autoreleasepool
        {
            NSString *fullPath = [searchPaths objectAtIndex:0];
            [searchPaths removeObjectAtIndex:0];
            
            struct stat fileStat;
            if (lstat([fullPath fileSystemRepresentation], &fileStat) == 0)
            {
                if (fileStat.st_mode & S_IFDIR)
                {
                    NSArray *childSubPaths = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:fullPath error:nil];
                    for (NSString *childItem in childSubPaths)
                    {
                        NSString *childPath = [fullPath stringByAppendingPathComponent:childItem];
                        [searchPaths insertObject:childPath atIndex:0];
                    }
                }else
                {
                    if (diskMode)
                        totalSize += fileStat.st_blocks*512;
                    else
                        totalSize += fileStat.st_size;
                }
            }
        }
    }
    
    return totalSize;
}

+ (NSString *)sizeStrForSize:(long long)size{
    NSString *sizeStr;
    if(size < 1024){
        sizeStr = [NSString stringWithFormat:@"%zdB",size];
    }
    else if(size < 1024 * 1024)
        sizeStr = [NSString stringWithFormat:@"%zdk",size / 1024];
    else{
        sizeStr = [NSString stringWithFormat:@"%.1fM",size / (1024 * 1024.f)];
    }
    return sizeStr;
}

+ (AVAsset *)avAssetFromALAsset:(ALAsset *)alasset{
    ALAssetRepresentation *representation = [alasset defaultRepresentation];
    NSString *filePath = [[representation url] absoluteString];
    AVAsset *avAsset = [AVAsset assetWithURL:[NSURL URLWithString:filePath]];
    return avAsset;
}

+ (NSString *)weekdayStr:(NSDate *)date{
    NSInteger weekday = [date weekday]; // ÊòüÊúüÂá†ÔºàÊ≥®ÊÑèÔºåÂë®Êó•ÊòØ‚Äú1‚ÄùÔºåÂë®‰∏ÄÊòØ‚Äú2‚Äù„ÄÇ„ÄÇ„ÄÇ„ÄÇÔºâ
    NSString *week = @"";
    switch (weekday) {
        case 1:
            week = @"ÊòüÊúüÊó•";
            break;
        case 2:
            week = @"ÊòüÊúü‰∏Ä";
            break;
        case 3:
            week = @"ÊòüÊúü‰∫å";
            break;
        case 4:
            week = @"ÊòüÊúü‰∏â";
            break;
        case 5:
            week = @"ÊòüÊúüÂõõ";
            break;
        case 6:
            week = @"ÊòüÊúü‰∫î";
            break;
        case 7:
            week = @"ÊòüÊúüÂÖ≠";
            break;
            
        default:
            break;
    }
    
    return week;
    
}

+ (void)saveImageToAlbum:(UIImage *)image{
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        //        MJPhoto *photo = _photos[_currentPhotoIndex];
        UIImageWriteToSavedPhotosAlbum(image, [self class], @selector(image:didFinishSavingWithError:contextInfo:), nil);
    });
}

+ (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo
{
    if (error) {
        if ([ALAssetsLibrary authorizationStatus] == ALAuthorizationStatusDenied)
        {
            [[[UIAlertView alloc] initWithTitle:@"ÂõæÁâá‰øùÂ≠òÂ§±Ë¥•üò±" message:@"ËØ∑Ê£ÄÊü•ÈöêÁßÅ‰∏≠ÁöÑÂõæÁâáËÆøÈóÆÊùÉÈôê„ÄÇ" delegate:nil cancelButtonTitle:@"Â•ΩÁöÑ" otherButtonTitles:nil] show];
        }
        else
        {
            [ProgressHUD showHintText:@"ÂõæÁâá‰øùÂ≠òÂ§±Ë¥•"];
        }
        
    } else {
        [ProgressHUD showHintText:@"Â∑≤‰øùÂ≠òÂà∞Êú¨Âú∞Áõ∏ÂÜå"];
    }
}

+ (void)saveVideoToAlbum:(NSString *)videoPath{
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        UISaveVideoAtPathToSavedPhotosAlbum(videoPath, [self class], @selector(video: didFinishSavingWithError:contextInfo:), nil);
    });
}

+ (void)video:(NSString *)videoPath didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo{
    if(!error){
        if ([ALAssetsLibrary authorizationStatus] == ALAuthorizationStatusDenied)
        {
            [[[UIAlertView alloc] initWithTitle:@"ËßÜÈ¢ë‰øùÂ≠òÂ§±Ë¥•üò±" message:@"ËØ∑Ê£ÄÊü•ÈöêÁßÅ‰∏≠ÁöÑÂõæÁâáËÆøÈóÆÊùÉÈôê„ÄÇ" delegate:nil cancelButtonTitle:@"Â•ΩÁöÑ" otherButtonTitles:nil] show];
        }
        else{
            [ProgressHUD showHintText:@"Â∑≤‰øùÂ≠òÂà∞Êú¨Âú∞Áõ∏ÂÜå"];
        }
    }
    else{
        [ProgressHUD showHintText:@"ËßÜÈ¢ë‰øùÂ≠òÂ§±Ë¥•"];
    }
}

+ (BOOL)checkVideoSize:(long long)size{
    if(size > kMaxVideoSize){
        LGAlertView *alertView = [[LGAlertView alloc] initWithTitle:@"ÊèêÁ§∫" message:@"ËßÜÈ¢ëÊñá‰ª∂ËøáÂ§ß" style:LGAlertViewStyleAlert buttonTitles:@[@"Á°ÆÂÆö"] cancelButtonTitle:nil destructiveButtonTitle:nil];
        [alertView setButtonsBackgroundColorHighlighted:[UIColor colorWithHexString:@"dddddd"]];
        [alertView showAnimated:YES completionHandler:nil];
        return NO;
    }
    else{
        return YES;
    }
}

+ (BOOL)checkVideo:(ALAsset *)asset{
    NSInteger duration = [[asset valueForProperty:ALAssetPropertyDuration] integerValue];
    if(duration > 10){
        LGAlertView *alertView = [[LGAlertView alloc] initWithTitle:@"ÊèêÁ§∫" message:@"ÁõÆÂâçËßÜÈ¢ëÊñá‰ª∂ÊöÇÊó∂‰∏çËÉΩË∂ÖËøá10Áßí" style:LGAlertViewStyleAlert buttonTitles:@[@"Á°ÆÂÆö"] cancelButtonTitle:nil destructiveButtonTitle:nil];
        [alertView setButtonsBackgroundColorHighlighted:[UIColor colorWithHexString:@"dddddd"]];
        [alertView showAnimated:YES completionHandler:nil];
        return NO;
    }
    return YES;
}

+ (NSString *)durationText:(NSInteger)duration{
    NSString *text = nil;
    NSInteger hour = duration / 3600;
    NSInteger minute = (duration - hour * 3600) / 60;
    NSInteger second = duration - hour * 3600 - minute * 60;
    if(duration < 60){
        text = [NSString stringWithFormat:@"0:%02zd",second];
    }
    else if(duration < 60 * 60){
        text = [NSString stringWithFormat:@"%zd:%02zd",minute, second];
    }
    else{
        text = [NSString stringWithFormat:@"%zd:%zd:%02zd",hour, minute, second];
    }
    return text;
}

@end
